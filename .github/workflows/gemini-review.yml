# .github/workflows/gemini-review.yml

name: 'Gemini Code Review'

# 触发条件：当有Pull Request被创建、同步（有新commit推送）或重新打开时

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    types: [opened, synchronize, reopened]

# 权限设置：赋予工作流向Pull Request写入评论的权限
permissions:
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      # 步骤 1: 检出代码
      # 使用 actions/checkout@v4 来获取代码
      # fetch-depth: 0 会获取所有git历史，这对于比较分支差异至关重要
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤 2: 获取代码变动 (Diff)
      # 比较当前PR分支与目标分支（如 main 或 master）之间的差异
      - name: Get Code Diff
        id: get_diff
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_REF="${{ github.base_ref }}"
            HEAD_REF="${{ github.head_ref }}"
            # 直接尝试 fetch 并 diff，若分支不存在则跳过
            git fetch origin "$BASE_REF" || true
            git fetch origin "$HEAD_REF" || true
            if git rev-parse --verify "origin/$BASE_REF" >/dev/null 2>&1 && git rev-parse --verify "origin/$HEAD_REF" >/dev/null 2>&1; then
              git diff "origin/$BASE_REF" "origin/$HEAD_REF" --no-color > changes.diff
            else
              echo "无法找到基准分支或头部分支，跳过 diff 生成。" > changes.diff
            fi
          else
            # push 事件，确保有两个提交可比较
            if [ $(git rev-list --count HEAD) -ge 2 ]; then
              git diff HEAD^ HEAD --no-color > changes.diff
            else
              # 首次提交或只有一个提交，无法 diff
              echo "首次提交或只有一个提交，无法生成 diff。" > changes.diff
            fi
          fi

          echo "diff_content<<EOF" >> $GITHUB_OUTPUT
          cat changes.diff >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      # 步骤 3: 调用 Gemini API 进行代码审查
      - name: Call Gemini API for Code Review
        id: gemini_review
        if: steps.get_diff.outputs.diff_content != ''
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          PROMPT="""
          As an expert senior software engineer, please perform a thorough code review on the following code changes.
          The code changes are provided in the git diff format.

          Your task is to:
          1.  **Identify potential bugs:** Look for logical errors, race conditions, null pointer exceptions, etc.
          2.  **Check for performance issues:** Analyze if the code is inefficient, has memory leaks, or could be optimized.
          3.  **Verify code style and conventions:** Ensure the code adheres to common best practices and is readable and maintainable.
          4.  **Assess security vulnerabilities:** Check for potential security risks like injection attacks, data exposure, etc.
          5.  **Provide actionable suggestions:** For each point you raise, offer a clear, constructive suggestion for improvement, including code snippets if necessary.

          Structure your feedback in Markdown format. Use headings for different categories of feedback (e.g., ### 🐛 Bugs, ### ⚡️ Performance, ### 🎨 Style).
          If there are no issues, simply respond with "Great work! I found no issues in this pull request."

          Here is the code diff:
          ```diff
          ${{ steps.get_diff.outputs.diff_content }}
          ```
          """

          JSON_PAYLOAD=$(jq -n \
            --arg prompt_text "$PROMPT" \
            '{ 
              "contents": [{ 
                "parts": [{ 
                  "text": $prompt_text 
                }]
              }], 
              "generationConfig": {
                "maxOutputTokens": 8192,
                "temperature": 0.4,
                "topP": 1
              },
              "safetySettings": [
                { "category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE" },
                { "category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE" },
                { "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE" },
                { "category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE" }
              ]
            }')

          API_URL="https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${GEMINI_API_KEY}"
          RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" "$API_URL")

          REVIEW_COMMENT=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text')

          if [ -z "$REVIEW_COMMENT" ] || [ "$REVIEW_COMMENT" == "null" ]; then
            echo "Failed to get review comment from Gemini API."
            echo "API Response:"
            echo "$RESPONSE"
            exit 1
          fi

          # 检查是否有致命错误，若有则拒绝 push/PR
          if echo "$REVIEW_COMMENT" | grep -E 'fatal|致命|严重错误|blocker|阻断'; then
            echo "❌ 检查到致命错误，拒绝此次 push/PR。"
            exit 1
          fi

          echo "review_comment<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW_COMMENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      # 步骤 4: 仅在PR事件时发布评论
      - name: Post Review Comment to PR
        if: github.event_name == 'pull_request' && steps.gemini_review.outputs.review_comment != ''
        uses: actions/github-script@v7
        with:
          script: |
            const reviewBody = `### 🚀 Gemini 1.5 Pro Code Review\n\n${{ steps.gemini_review.outputs.review_comment }}`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: reviewBody
            });
